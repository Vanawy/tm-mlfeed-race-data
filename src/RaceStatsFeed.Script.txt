declare Text G_PreviousMapUid;

// logging function, should be "MLHook_LogMe_" + PageUID
Void MLHookLog(Text msg) {
    SendCustomEvent("MLHook_LogMe_RaceStats", [msg]);
}

Integer SpawnStatusToUint(CSmPlayer::ESpawnStatus status) {
    switch (status) {
        case CSmPlayer::ESpawnStatus::NotSpawned: {
            return 0;
        }
        case CSmPlayer::ESpawnStatus::Spawning: {
            return 1;
        }
        case CSmPlayer::ESpawnStatus::Spawned: {
            return 2;
        }
        default: {}
    }
    return 0;
}

Integer GetBestRaceTime(CSmPlayer Player) {
    if (Player == Null || Player.Score == Null) return -1;
    if (Player.Score.BestRaceTimes.count == 0) return -1;
    return Player.Score.BestRaceTimes[Player.Score.BestRaceTimes.count - 1];
}

declare Integer[Text] LastSpawnTime;

// send a complete list of players every now and then.
Void SendKnownPlayers() {
    declare Text playerNames = "";
    declare Text bestTimes = "";
    foreach (Player in Players) {
        declare Text Name = Player.User.Name;
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
            LastSpawnTime[Name] = GameTime;
        }
        // // skip players that have not been spawned for >60s
        // if (!LastSpawnTime.existskey(Name) || LastSpawnTime[Name] + 60000 < GameTime)
        //     continue;
        if (playerNames == "") {
            playerNames = Player.User.Name;
            bestTimes = ""^GetBestRaceTime(Player);
        } else {
            playerNames = playerNames^","^Player.User.Name;
            bestTimes = bestTimes^","^GetBestRaceTime(Player);
        }
    }
    SendCustomEvent("MLHook_Event_RaceStats_ActivePlayers", [playerNames, bestTimes]);
}

// we only want to send info when a player's CP count changes.
declare Integer[Text] LastCPCounts;
declare CSmPlayer::ESpawnStatus[Text] LastSpawn;

Void _SendPlayerStats(CSmPlayer Player, Boolean Force) {
    declare Text Name = Player.User.Name;
    declare CPCount = Player.RaceWaypointTimes.count;
    // update spawned time
    if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
        LastSpawnTime[Player.User.Name] = GameTime;
    }
    // check for changes
    declare Boolean SpawnChanged = LastSpawn.existskey(Name) && Player.SpawnStatus != LastSpawn[Name];
    declare Boolean CpsChanged = LastCPCounts.existskey(Name) && CPCount != LastCPCounts[Name];
    // update if there are changes or the update is forced.
    if (Force || SpawnChanged || CpsChanged) {
        declare LatestCPTime = "";
        if (CPCount > 0) {
            LatestCPTime = ""^Player.RaceWaypointTimes[CPCount - 1];
        }
        // events should be prefixed with "MLHook_Event_" + PageUID.
        // Suffixes can be applied if multiple types of events are sent.
        SendCustomEvent("MLHook_Event_RaceStats", [Name, ""^CPCount, LatestCPTime, ""^GetBestRaceTime(Player), ""^SpawnStatusToUint(Player.SpawnStatus)]);
    }
    // update last spawn and cp count always
    LastCPCounts[Name] = CPCount;
    LastSpawn[Name] = Player.SpawnStatus;
}

// to start with we want to send all data.
Void InitialSend() {
    foreach (Player in Players) {
        _SendPlayerStats(Player, True);
    }
    MLHookLog("Completed: InitialSend");
}

Void CheckPlayers() {
    foreach (Player in Players) {
        _SendPlayerStats(Player, False);
    }
}

Void CheckMapChange() {
    if (Map != Null && Map.MapInfo.MapUid != G_PreviousMapUid) {
        G_PreviousMapUid = Map.MapInfo.MapUid;
        LastCPCounts = [];
    }
}

Void CheckIncoming() {
    declare Text[][] MLHook_Inbound_RaceStats for ClientUI;
    foreach (Event in MLHook_Inbound_RaceStats) {
        if (Event[0] == "SendAllPlayerStates") {
            InitialSend();
        } else {
            MLHookLog("Skipped unknown incoming event: " ^ Event);
            continue;
        }
        MLHookLog("Processed Incoming Event: "^Event[0]);
    }
    MLHook_Inbound_RaceStats = [];
}

main() {
    declare Integer LoopCounter = 0;
    MLHookLog("Starting RaceStatsFeed");
    while (Players.count == 0) {
        yield;
    }
    MLHookLog("RaceStatsFeed got init players");
    yield;
    InitialSend();
    MLHookLog("RaceStatsFeed did init send");
    while (True) {
        yield;
        CheckPlayers();
        LoopCounter += 1;
        if (LoopCounter % 60 == 0) {
            SendKnownPlayers();
            CheckMapChange();
        }
        if (LoopCounter % 60 == 20) {
            CheckIncoming();
        }
    }
}
